version: 0

info:
  title: Agency RPC API
  description: Spec for intercomponent communication
  version: 0.0.1

methods:
  ready:
    scopes:
      - any
  trigger.emit:
    operationId: triggerEmit
    scopes:
      - sensor
    parameters:
      - name: trigger
        schema:
          type: object
          # Trigger component
  rule.list:
    operationId: ruleList
    scopes:
      - operator
      - rule
    parameters:
      - name: query
        schema:
          type: object
    response:
      type: array
      items:
        $ref: '#/definitions/Rule'
  rule.create:
    operationId: ruleCreate
    scopes:
      - operator
    parameters:
      - name: rule
        schema:
          type: object
          # Rule create component
    response:
      $ref: '#/definitions/Rule'
  rule.update:
    operationId: ruleUpdate
    scopes:
      - operator
    parameters:
      - name: rule
        schema:
          type: object
          # Rule create component
    response:
      $ref: '#/definitions/Rule'
  rule.delete:
    operationId: ruleDelete
    scopes:
      - operator
    parameters:
      - name: rule
        schema:
          type: object
          # Rule delete component
    response:
      $ref: '#/definitions/Deleted'
  execution.list:
    operationId: executionList
    scopes:
      - operator
    parameters:
      - name: query
        schema:
          type: object
    response:
      type: array
      items:
        $ref: '#/definitions/Execution'
  execution.request:
    operationId: executionRequest
    scopes:
      - rule
    parameters:
      - name: execution
        schema:
          type: object
          # Execution request component
    response:
      $ref: '#/definitions/Execution'
  execution.schedule:
    operationId: executionSchedule
    scopes:
      - rule
    parameters:
      - name: execution
        schema:
          type: object
          # Execution request component
    response:
      $ref: '#/definitions/Execution'
  execution.claim:
    operationId: executionClaim
    scopes:
      - execution
    parameters:
      - name: id
        schema:
          type: string
    response:
      type: object
      properties:
        granted:
          type: boolean
  execution.started:
    operationId: executionStarted
    scopes:
      - execution
    parameters:
      - name: id
        schema:
          type: string
  execution.completed:
    operationId: executionCompleted
    scopes:
      - execution
    parameters:
      - name: result
        schema:
          type: object
          # Result component
    response:
      $ref: '#/definitions/Execution'
  token.create:
    operationId: tokenCreate
    scopes:
      - identity
    parameters:
      - name: identity
        schema:
          $ref: '#/definitions/TokenRequest'
    response:
      $ref: '#/definitions/Token'
  token.list:
    operationId: tokenList
    scopes:
      - identity
    parameters:
      - name: query
        schema:
          type: object
    response:
      type: array
      items:
        $ref: '#/definitions/Token'
  token.delete:
    operationId: tokenDelete
    scopes:
      - identity
    parameters:
      - name: token
        schema:
          type: object
          parameters:
            id:
              type: string
          required:
            - id
    response:
      $ref: '#/definitions/Deleted'

events:
  trigger:
    scopes:
      - rule
    response:
      $ref: '#/definitions/Trigger'
  execution:
    scopes:
      - execution
    response:
      $ref: '#/definitions/Execution'
  rule:
    scopes:
      - rule
    response:
      $ref: '#/definitions/Rule'
  result:
    scopes:
      - rule
      - operator
    response:
      $ref: '#/definitions/Result'

definitions:
  Deleted:
    type: object
    properties:
      id:
        type: string
      deleted:
        const: true
  TriggerRequest:
    type: object
    properties:
      id:
        type: string
      type:
        type: string
      event:
        type: object
      user:
        type: string
    additionalProperties: false
    required:
      - type
      - event
  Trigger:
    type: object
    properties:
      id:
        type: string
      type:
        type: string
      event:
        type: object
      user:
        type: string
    additionalProperties: false
    required:
      - id
      - type
      - event
      - user
  Rule:
    type: object
    properties:
      id:
        type: string
      code:
        type: string
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      user:
        type: string
    additionalProperties: false
    required:
      - id
      - code
      - created_at
      - user
  Execution:
    type: object
    properties:
      id:
        type: string
      triggered_by:
        type: string
      action:
        type: string
      parameters:
        type: object
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      status:
        enum:
          - requested
          - claimed
          - running
          - completed
      user:
        type: string
    additionalProperties: false
    required:
      - id
      - triggered_by
      - action
      - parameters
      - created_at
      - status
      - user
  Results:
    type: object
    properties:
      id:
        type: string
      result:
        type: object
      status:
        enum:
          - succeeded
          - failed
          - timeout
      user:
        type: string
    additionalProperties: false
    required:
      - id
      - result
      - status
  TokenRequest:
    type: object
    properties:
      id:
        type: string
      user:
        type: string
      meta:
        type: object
        properties:
          scopes:
            type: string
    additionalProperties: false
    required:
      - user
      - meta
  Token:
    type: object
    properties:
      id:
        type: string
      user:
        type: string
      meta:
        type: object
        properties:
          scopes:
            type: string
    additionalProperties: false
    required:
      - id
      - user
      - meta
